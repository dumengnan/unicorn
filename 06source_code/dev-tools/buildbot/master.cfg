# -*- python -*-
# ex: set filetype=python:

from buildbot.plugins import *

# This is a sample buildmaster config file. It must be installed as
# 'master.cfg' in your buildmaster's base directory.

# This is the dictionary that the buildmaster pays attention to. We also use
# a shorter alias to save typing.
c = BuildmasterConfig = {}

####### WORKERS

# The 'workers' list defines the set of recognized workers. Each element is
# a Worker object, specifying a unique worker name and password.  The same
# worker name and password must be configured on the worker.
c['workers'] = [worker.Worker("unicorn-worker", "pass", max_builds=2)]

# 'protocols' contains information about protocols which master will use for
# communicating with workers. You must define at least 'port' option that workers
# could connect to your master with this protocol.
# 'port' must match the value configured into the workers (with their
# --master option)
c['protocols'] = {'pb': {'port': 9989}}

####### CHANGESOURCES

# the 'change_source' setting tells the buildmaster how it should find out
# about source code changes.  Here we point to the buildbot clone of pyflakes.

c['change_source'] = []
c['change_source'].append(changes.GitPoller(
        'https://dumengnan:a1205102035@github.com/dumengnan/unicorn.git',
        workdir='gitpoller-workdir', branch='master',
        pollinterval=300))

####### SCHEDULERS

# Configure the Schedulers, which decide how to react to incoming changes.  In this
# case, just kick off a 'runtests' build

c['schedulers'] = []
c['schedulers'].append(schedulers.SingleBranchScheduler(
                            name="all",
                            change_filter=util.ChangeFilter(branch='master'),
                            treeStableTimer=None,
                            builderNames=["compile"]))
                            
# 强制编译
c['schedulers'].append(schedulers.ForceScheduler(
                            name="force-release",
                            builderNames=["compile"],
                            properties=[
                            util.NestedParameter(name="options", label="Build Options", layout="vertical", 
                            fields=[
                            util.StringParameter(name="pull_url",
                                 label="optionally give a public Git pull url:",
                                 default="", size=80),
                            util.BooleanParameter(name="force_build_clean",
                                  label="force a make clean",
                                  default=False)
                            ])
                        ]))
                            
# 添加release  每天凌晨三点执行
c['schedulers'].append(
    schedulers.Nightly(name='nightly',
                       branch='master',
                       builderNames=['release'],
                       hour=3, minute=0))
# 强制release
c['schedulers'].append(schedulers.ForceScheduler(
                            name="force",
                            builderNames=["release"],
                            properties=[
                            util.NestedParameter(name="options", label="Build Options", layout="vertical", 
                            fields=[
                            util.StringParameter(name="pull_url",
                                 label="optionally give a public Git pull url:",
                                 default="", size=80),
                            util.BooleanParameter(name="force_build_clean",
                                  label="force a make clean",
                                  default=False)
                            ])
                        ]))
        
                               
####### BUILDERS

# The 'builders' list defines the Builders, which tell Buildbot how to perform a build:
# what steps, and which workers can execute them.  Note that any particular build will
# only take place on one worker.

factory = util.BuildFactory()
# check out the source
factory.addStep(steps.Git(repourl='https://dumengnan:a1205102035@github.com/dumengnan/unicorn.git', mode='incremental'))
# run the tests (note that this will require that 'trial' is installed)
factory.addStep(steps.ShellCommand(command=["ant", "compile"]))
factory.useProgress = False

# release 执行命令
release_factory = util.BuildFactory()
release_factory.addStep(steps.Git(repourl='https://dumengnan:a1205102035@github.com/dumengnan/unicorn.git', mode='incremental'))
release_factory.addStep(steps.ShellCommand(command=["ant", "release"]))
release_factory.addStep(steps.ShellCommand(command=["./copy_release.sh", 'master']))
release_factory.useProgress = False

c['builders'] = []
c['builders'].append(
    util.BuilderConfig(name="compile",
      workernames=["unicorn-worker"],
      factory=factory))
      
c['builders'].append(
    util.BuilderConfig(name="release",
      workernames=["unicorn-worker"],
      factory=release_factory))

####### BUILDBOT SERVICES

# 'services' is a list of BuildbotService items like reporter targets. The
# status of each build will be pushed to these targets. buildbot/reporters/*.py
# has a variety to choose from, like IRC bots.

c['services'] = []
template=u'''\
<h4>Build status: {{ summary }}</h4>
<p> Worker used: {{ workername }}</p>
{% for step in build['steps'] %}
<p> {{ step['name'] }}: {{ step['result'] }}</p>
{% endfor %}
<p><b> -- The Buildbot</b></p>
'''

mn = reporters.MailNotifier(fromaddr="18652005280@126.com",
                            sendToInterestedUsers=False,
                            mode=('failing',),
                            extraRecipients=['18652005280@126.com'],
                            messageFormatter=reporters.MessageFormatter(
                                template=template, template_type='html',
                                wantProperties=True, wantSteps=True))
                            
c['services'].append(mn)

####### PROJECT IDENTITY

# the 'title' string will appear at the top of this buildbot installation's
# home pages (linked to the 'titleURL').

c['title'] = "unicorn"
c['titleURL'] = "http://unicornbigdata.bid"

# the 'buildbotURL' string should point to the location where the buildbot's
# internal web server is visible. This typically uses the port number set in
# the 'www' entry below, but with an externally-visible host name which the
# buildbot cannot figure out without some help.

c['buildbotURL'] = "http://192.168.0.6:8010/"

# minimalistic config to activate new web UI
c['www'] = dict(port=8010,
                plugins=dict(waterfall_view=True, console_view=True,grid_view=True), change_hook_dialects={'github': {'secret':'a1205102035'}})

                
# Mergeing Build Requests
c['collapseRequests'] = True


# Metrics
c['metrics'] = dict(log_interval=10, periodic_interval=10)

####### DB URL

c['db'] = {
    # This specifies what database buildbot uses to store its state.  You can leave
    # this at its default for all but the largest installations.
    'db_url' : "sqlite:///state.sqlite",
}


